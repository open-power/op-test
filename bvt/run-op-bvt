#!/usr/bin/env perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: op-test-framework/bvt/run-op-bvt $
#
# OpenPOWER Automated Test Project
#
# Contributors Listed Below - COPYRIGHT 2015-2016
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

# Run OpenPower automated build verification test (BVT)
#
# Original Author: Alan Hlava
# Reworked heavily by Stewart Smith

use strict;

use File::Copy;
use FindBin;
use lib "$FindBin::Bin";
use XML::LibXML;
use File::Path;
use Getopt::Long qw(:config pass_through);
use Time::localtime;
use OpTestInfra;
use OPBVTXML;
use Test::More;

my $quiet;
my $verbose_str = "";
my $fvfile = "";
my $commandline;

# Environment
my $userid = $ENV{USER};

my $resdir = "$ENV{HOME}/run-op-bvt";
my $logdir;
my $logfile;
my $tmpdir;
my $logf;
my @bvtxmlfiles;
my $tmp_bvtxmlfile = 0;
my $bvtxmlfile;
my $fullbvtxmlfile;
my %xmlvars;
my $xmlvars_it = "";

# Working variables
my $timestamp;
my $def_machine = "";
my $machine;
my $xml;
my $xmldata;
my $cmd;
my $cmdout;
my $tmp;
my @flds;
my $run_counter = 0;

my %test_results;
my $totalrc = 0;

my $test_id;
my $test_title;
my $test_machine;
my $test_state;
my $test_xml;
my $rc = 0;

my $test_env = "hw";
my $restrict_env = "";
my $test_systems = 0; # "Hidden" option to not run tests, just test --systems dispatching code
my $testname;

my $usage = "Run OpenPower Build Verification Test (BVT)

Syntax: run-op-bvt [OPTIONS] bvtfile.xml [bvtfile2.xml ...]

Where bvtfile.xml is the master BVT XML file.

Where OPTIONS is zero or more of:
   --verbose : Display extra debug statements during execution
   --quiet : Be very quiet, only emit TAP.
   --result dir : Directory to output all results and logs to
   --test testname : only run testname
   --xxx yyy : any \"--\" option other than the ones listed above is assumed
             to be a .xml file substitution variable. In this case, all
             instances of \"%%xxx%%\" in the .xml file will be replaced by
             \"yyy\" when processing the file.  This enables the .xml file
             to be used as a template that can be used to run a variety of
             tests.
\n";

sub syntax()
{
    print STDERR "$usage";
    exit(1);
}

sub runCmd
{
    my ($l_cmd) = @_;
    vprint "cmd: $l_cmd\n";
    my $rc = system($l_cmd);
    vprint "cmd returned $rc\n";
    return $rc;
}

sub logprint
{
    my ($msg, $err) = @_;
    $timestamp = sprintf "%02d:%02d:%02d", localtime->hour, localtime->min, localtime->sec;

    if (defined($logf))
    {
        print $logf "${timestamp} :: $msg";
    }

    if ($err)
    {
        print STDERR "${timestamp} :: $msg";
    }
    else
    {
        print "${timestamp} :: $msg" unless $quiet;
    }
}

sub errprint
{
    my ($msg) = @_;
    logprint("$msg", 1);
}

sub doVarSub
{
    my ($value) = @_;

    # Do substitution for any xmlvar keys
    foreach my $key (keys %xmlvars)
    {
        $value =~ s/\%\%$key\%\%/$xmlvars{$key}/g;
    }
    return $value;
}

sub getFileName
{
    my ($fullpath) = @_;
    my $fn = $fullpath;
    my $pos = rindex($fn, "/");
    if ($pos != -1)
    {
        $fn = substr($fn, ($pos + 1));
    }
    return $fn;
}

sub getXMLFilePath
{
    my ($inxmlfile) = @_;
    my $outxmlfile = "";
    vprint ">getXMLFilePath($inxmlfile)\n";

    # Get absoute filename of BVT XML
    if ($inxmlfile =~ /^\//)
    {
        vprint "$inxmlfile is absolute path so using that\n";
        $outxmlfile = $inxmlfile;
    }
    else
    {
        $tmp = `pwd`;
        chomp($tmp);
        $outxmlfile = "${tmp}/${inxmlfile}";
        vprint "checking for $outxmlfile\n";
        if (! -e $outxmlfile)
        {
            errprint "ERROR: could not find $inxmlfile in BACKED_SANDBOXDIR list ($ENV{BACKED_SANDBOXDIR})\n";
            exit(9);
        }
    }
    vprint "<getXMLFilePath($inxmlfile) returning $outxmlfile\n";
    return $outxmlfile;
}

sub checkSkipTest
{
    my ($bvt_node) = @_;
    my $rc = 0;

    $restrict_env = doVarSub( ($bvt_node->findnodes('./restrict-env'))->to_literal );
    if (($restrict_env ne "") && ($restrict_env ne $test_env))
    {
        logprint "Skipping BVT test \"${test_title}\" due to not running in $restrict_env environment\n";
        $rc = 1;
    }

    return $rc;
}

sub runTest
{
    my ($test_id, $title, $mach, $relxmlfile) = @_;
    vprint ">runTest($test_id, \"$title\", $mach, $relxmlfile)\n";
    my $machine_opt = "";

    if ($mach eq "%%default%%")
    {
        $mach = $def_machine;
        vprint "mach set to: $mach\n";
    }
    if ($mach ne "")
    {
        $machine_opt = "--machine $mach";
    }

    # Run the test
    logprint "Starting \"${test_title}\" ($test_xml)\n";
    $cmd = "run-op-it $verbose_str ";
    $cmd .= " --quiet" if $quiet;
    $cmd .= " --result $resdir" if $resdir;
    $cmd .= " --test=\"$testname\"" if $testname;
    $cmd .= " --testenv $test_env $machine_opt $xmlvars_it $relxmlfile";
    if (runCmd($cmd))
    {
        errprint "ERROR: \"${test_title}\" ($test_xml) finished with one or more errors\n";
	diag("FAILED processing($test_title)");
        $totalrc += 1;
    }
    else
    {
        logprint "OK: \"${test_title}\" ($test_xml) finished successfully\n";
	diag("Done processing $test_title");
    }

    vprint "<runTest($test_id, \"$title\", $mach, $relxmlfile)\n";
}

END
{
    vprint ">run-op-bvt cleanUp($?)\n";

    if ($tmp_bvtxmlfile)
    {
        unlink $bvtxmlfile;
    }

    if ($?)
    {
        print "All logs and FFDC saved under $resdir\n";
    }
    vprint "<run-op-bvt cleanUp($?)\n";
}

#-----------------------------------------------------------------------------
# parse the arguments
#-----------------------------------------------------------------------------
$| = 1; # Force STDOUT to be unbuffered so we get output in the right order

my $help = 0;
$commandline = $0 . " ". (join " ", @ARGV);
GetOptions('help|?|h' => \$help,
	   'verbose' => sub { set_verbose(1); $verbose_str = "--verbose"; },
	   'result=s' => \$resdir,
	   'test=s' => \$testname,
	   'quiet' => \$quiet,
    ) or syntax();

$logdir = "${resdir}/logs" unless $logdir;
$logfile = "${logdir}/run-op-bvt.log" unless $logfile;
$tmpdir = "$resdir/tmp" unless $tmpdir;

my @argv = @ARGV;
while (my $arg = shift @argv)
{
    # Arguments representing XML substitution variables...
    if ($arg =~ /^\-\-/)
    {
        $arg = substr($arg, 2);
        $xmlvars{$arg} = shift(@argv);
        if ($arg eq "machine") { $def_machine = $xmlvars{$arg}; }
        else { $xmlvars_it .= " --$arg $xmlvars{$arg}"; }
        next;
    }
    if ($arg =~ /^\-/)
    {
        $arg = substr($arg, 1);
        $xmlvars{$arg} = shift(@argv);
        if ($arg eq "machine") { $def_machine = $xmlvars{$arg}; }
        else { $xmlvars_it .= " --$arg $xmlvars{$arg}"; }
        next;
    }
    push @bvtxmlfiles, $arg;
}

syntax() if $help;

logprint "Command line: $commandline\n";

# Merging input files
# This takes all the bvt nodes from input files and
# inserts them before the first test of the final input file.
# this can preserve order.
sub mergeBvtInputFiles
{
    my (@files) = @_;
    my @docs;

    foreach my $f (@files) {
	push @docs, XML::LibXML->load_xml(location => $f);
    }

    my $merged_doc = pop @docs;

    foreach my $d (@docs) {
	my ($bvt_node) = $merged_doc->findnodes('//*[local-name()="bvt"]');
	for my $t ($d->findnodes('//*[local-name()="bvt"]')) {
	    $bvt_node->parentNode->insertBefore($t, $bvt_node);
	}
    }

    # We process XIncludes now, as we're going to save the result to
    # a temporary file, which will mess up XInclude paths.
    my $parser = XML::LibXML->new();
    $parser->process_xincludes($merged_doc);

    return $merged_doc->serialize;
}

if (@bvtxmlfiles > 1)
{
    my $bvtxml = mergeBvtInputFiles(@bvtxmlfiles);
    $bvtxmlfile = "${resdir}/merged-bvt-$$.xml";
    open(my $f, "> $bvtxmlfile")
	or die "Cannot open merged bvt XML: $bvtxmlfile";
    print $f $bvtxml;
    close $f;
}
elsif (@bvtxmlfiles == 1)
{
    $bvtxmlfile = shift @bvtxmlfiles;
}
else
{
    errprint "ERROR: you must specify the master BVT XML file\n";
    exit(9);
}


#-------------------------------------------------------------------------------
# set vars representing execution environment
#-------------------------------------------------------------------------------
File::Path::make_path($resdir) if (! -d "${resdir}");
File::Path::make_path($tmpdir) if (! -d "${tmpdir}");
File::Path::make_path($logdir) if (! -d "${logdir}");

# Open the log file and print the startup message
open($logf, ">$logfile") || die "ERROR: unable to open $logfile for write:$!";
$tmp = sprintf("%d-%02d-%02d", localtime->year + 1900,
	       localtime->mon + 1 , localtime->mday);
logprint "Starting BVT ($bvtxmlfile) on $tmp...\n";
logprint "Log file: $logfile\n";


# Get absoute filename of BVT XML
$fullbvtxmlfile = getXMLFilePath($bvtxmlfile);
vprint "fullbvtxmlfile: $fullbvtxmlfile\n";
if (! -e $fullbvtxmlfile)
{
    errprint "ERROR: could not find $bvtxmlfile\n";
    exit(9);
}

vprint "run-op-bvt\n";
vprint "xmlvars{machine}: $xmlvars{machine}\n";
vprint "bvtxmlfile: $bvtxmlfile\n";


if (! OPBVTXML::bvt_xml_is_valid("op-it.xsd", $fullbvtxmlfile))
{
    errprint "ERROR: XML file failed validity checking\n";
    exit(9);
}

#------------------------------------------------------------------------------
# Read the BVT XML file
#------------------------------------------------------------------------------
$xml = XML::LibXML->new();
$xmldata = $xml->parse_file("${fullbvtxmlfile}");

#------------------------------------------------------------------------------
# Run all the tests
#------------------------------------------------------------------------------
my $found_priv_test = 0;
foreach my $bvt ( $xmldata->findnodes('/bvts/bvt') )
{
    $test_id = doVarSub( ($bvt->findnodes('./id'))->to_literal );
    vprint "test_id: $test_id   test_state: $test_state\n";
    $test_machine = doVarSub( ($bvt->findnodes('./machine'))->to_literal );
    $test_title = doVarSub( ($bvt->findnodes('./title'))->to_literal );
    $test_xml = doVarSub( ($bvt->findnodes('./bvt-xml'))->to_literal );
    if (checkSkipTest($bvt)) { next; }
    if (!$found_priv_test)
    {
        $found_priv_test = 1;
    }
    runTest($test_id,
            "$test_title",
            $test_machine,
            $test_xml);
}

#------------------------------------------------------------------------------
# Cleanup and exit
#------------------------------------------------------------------------------
$tmp = sprintf("%d-%02d-%02d", localtime->year + 1900,
	       localtime->mon + 1 , localtime->mday);
if ($totalrc == 0)
{
    logprint "OK: Finished BVT tests on $tmp with no testcase errors.\n";
}
else
{
    errprint "ERROR: Finished BVT tests on $tmp with $totalrc testcase failures.\n";
}

diag "All logs and FFDC saved under $resdir\n";
exit $totalrc;
