#!/usr/bin/perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: op-auto-test/bvt/read-op-xml-it $
#
# OpenPOWER Automated Test Project
#
# Contributors Listed Below - COPYRIGHT 2015
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

# Read integration test XML file to stdout and expand include nesting
#
# Author: Alan Hlava

use strict;

use FindBin;
use lib "$FindBin::Bin";
use Getopt::Long;
use OpTestInfra;
use XML::LibXML;

my $fvfile = "";
my $verbose_str = "";

my $filename = "";
my $infilename = "";
my $incfilename = "";
my $x;
my $include_count = 1;
my $processing_include = 0; # Internal flag to indicate we're processing an <include> rather than the outermost XML file

sub syntax()
{
    print "Read integration test XML file to stdout and expand include nesting\n\n";
    print "Syntax: read-op-xml-it [OPTIONS] file.xml\n";
    print "   file.xml : the test definition file\n";
    print "\nWhere OPTIONS is one or more of:\n";
    print "   --verbose : display additional debug information while executing\n";
    print "   --fverbose xxxx : Store additional diagnostic and informational messages\n";
    print "         when setting up and running the test in the specified file (default=none)\n";
    exit(1);
}

my $help = 0;

GetOptions("help|h|?" => \$help,
	   "verbose" => sub { set_verbose(1); $verbose_str = "--verbose"; },
	   "fverbose:s" => sub { $fvfile = shift; set_verbose(1, $fvfile); $verbose_str = "--fverbose $fvfile" },
	   "include" => sub { $processing_include = 1; },
	   "<>" => sub { $filename = shift; }
    ) or syntax();

syntax() if $help;

if ($filename eq "")
{
    print STDERR "ERROR: read-op-xml-it: you must specify a XML file defining the test\n";
    exit(9);
}

vprint "Starting read-op-xml-it\n";
vprint "processing_include: $processing_include\n";

$infilename = findRelFile($filename);
my $parser = XML::LibXML->new();
my $dom = XML::LibXML->load_xml(location => $infilename);
$parser->process_xincludes($dom);
print $dom->serialize;
exit(0);
