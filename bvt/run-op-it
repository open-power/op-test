#!/usr/bin/env perl
# IBM_PROLOG_BEGIN_TAG
# This is an automatically generated prolog.
#
# $Source: op-test-framework/bvt/run-op-it $
#
# OpenPOWER Automated Test Project
#
# Contributors Listed Below - COPYRIGHT 2015-2016
# [+] International Business Machines Corp.
#
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or
# implied. See the License for the specific language governing
# permissions and limitations under the License.
#
# IBM_PROLOG_END_TAG

# Run OpenPOWER automated integration test
#
# Original Author: Alan Hlava
# Heavily reworked by Stewart Smith

use strict;

use FindBin;
use XML::LibXML;
use lib "$FindBin::Bin";

my %test_env = {};

my $usage = "Run OpenPower Automated Integration Test

Syntax:
   1) Run test:                         run-op-it [OPTIONS] file.xml

   file.xml : the test definition file

OPTIONS is one or more of:
   --debug xml | cmd : instead of running the test, do the specified debug:
          xml : just display the resulting XML after include processing and variable substitution
          cmd : just display all commands instead of running them
   --quiet : be quiet and just output TAP
   --testenv x,y,z : Specifies test environment properties
   --verbose : display additional debug information while executing
   --xxx yyy : any \"--\" option other than the ones listed above is assumed
          to be a .xml file substitution variable. In this case, all
          instances of \"%%xxx%%\" in the .xml file will be replaced by
          \"yyy\" when processing the file.  This enables the .xml file
          to be used as a template that can be used to run a variety of
          tests.
";
my $fvfile = "";
my $verbose_str = "";

                                                                            ###
package Testcase;
                                                                            ###
use Time::localtime;

use Class::Struct;
struct (
id => '$',
cmd => '$',
arg => '$',
ffdc   => '$',
exitonerror => '$',
restrict_env => '@'
);

1;

use Getopt::Long qw(:config pass_through);
use OpTestInfra;
use OPBVTXML;
use Test::More;

my $quiet;
my $filename = "";
my $cmd;
my $rc = 0;
my $xmldata;
my $cmd_line_machine;
my $machine;
my $testgrp = "";
my $restrict_env = "";
my $exitonerror = 0;
my $args = "";
my $totalrc = 0;
my $tmp;
my %xmlvars;
my %keyattrs;
my $debug = "";
my $title_text = "Integration Test";
my $testcaseid = "";
my $testname;

my $logfile;

# killtree

sub killtree
{
    my ($killpid, $sig) = @_;
    my $tmp = `ps -o pid --no-headers --ppid ${killpid}`;
    my @children = split(/\n/, $tmp);
    foreach my $child (@children)
    {
        killtree(${child}, ${sig});
    }
    if ($killpid != $$)
    {
        diag "sending process $killpid signal $sig\n";
        system("kill -${sig} ${killpid}");
    }
}

$SIG{'TERM'} = 'sigtermHandler';
sub sigtermHandler
{
    diag "\nrun-op-it received SIGTERM, so terminating!\n";

    # Clean up all child processes that may be left-over
    killtree($$, "SIGTERM");

    exit (1);
}

sub syntax()
{
    print STDERR "$usage";
    exit(1);
}

sub printMsg
{
    my ($msg) = @_;
    my $timestamp = sprintf "%02d:%02d:%02d", localtime->hour, localtime->min, localtime->sec;
    print "${timestamp} :: ${msg}" unless $quiet;

    vprint "${timestamp} :: ${msg}";
    if ($logfile ne "")
    {
	open(LOGF, ">>$logfile");
	print LOGF "${timestamp} :: ${msg}";
	close(LOGF); # Always close/reopen because we have to send shell output to it
    }
}

sub printErrorMsg
{
    my ($msg) = @_;
    my $timestamp = sprintf "%02d:%02d:%02d", localtime->hour, localtime->min, localtime->sec;
    diag "${timestamp} :: ${msg}";
    vprint "${timestamp} :: ${msg}";
    if ($logfile ne "")
    {
        open(LOGF, ">>$logfile");
        print LOGF "${timestamp} :: ${msg}";
        close(LOGF); # Always close/reopen because we have to send shell output to it
    }
}

sub runCmd
{
    my ($cmd, $log_cmd) = @_;
    my $cmdtmpprogfile = "";
    my $cmdrc = 0;
    my $has_redirection = 0;
    vprint ">runCmd()\n";

    # Fix up any XML substitution symbols left in the command string
    if (index($cmd, "\&gt;") != -1 )
    {
        $has_redirection = 1;
    }
    $cmd =~ s/\&gt\;/\>/g;
    $cmd =~ s/\&lt\;/\</g;
    $cmd =~ s/\&amp\;/\&/g;

    if ($debug ne "cmd")
    {
        if ($log_cmd)
        {
            printMsg("Running command: $cmd\n");
        }
        if (($logfile ne "") && ($has_redirection == 0))
        {
            $cmd .= " >>$logfile 2>&1";
        }
        vprint "cmd: $cmd\n";
        $cmdrc = system($cmd);
    }
    else
    {
        diag "Running: $cmd\n";
    }
    if ($cmdtmpprogfile ne "")
    {
        system("rm -f $cmdtmpprogfile");
        printf("\n"); # Separate from in-progress msgs
        printMsg("\n"); # Separate from in-progress msgs
    }
    if ($cmdrc == 0)
    {
        printMsg("OK: command finished successfully\n");
    }
    else
    {
        printErrorMsg("ERROR: command failed with exit code $cmdrc\n");
    }

    vprint "<runCmd() returning $cmdrc\n";
    return $cmdrc;
}

sub runCmdTest
{
    my ($testcase, $testcaseid) = @_;
    vprint ">runCmdTest\n";
    my $x;

    # Trim off any arguments included in the testcase string
    $x = index($testcase, " ");
    if ($x != -1)
    {
        $args .= substr($testcase, $x);
        $testcase = substr($testcase, 0, $x);
    }

    # Convert relative path (if any) to absolute path
    my $test_script_file = findRelFile($testcase);

    my $testrc = runCmd("$test_script_file $args", 1);
    $totalrc += $testrc;

    vprint "<runCmdTest (testrc: $testrc   totalrc: $totalrc)\n";
    return $testrc;
}

sub readXml
{
    my ($xml_path) = @_;

    my $parser = XML::LibXML->new();
    my $dom = XML::LibXML->load_xml(location => $xml_path);
    $parser->process_xincludes($dom);
    return $dom->serialize;
}

END
{
    if ($? && ($logfile ne ""))
    {
        print "Output from this test saved in $logfile\n";
    }
}

sub runAllTests
{
    my $savexmldata;
    my $testcase_index = 0;
    my @ffdc_scripts;
    my $ffdc_script = "";
    my $ffdc_script_count = 0;
    my @testcases_to_run;

    #--------------------------------------------------------------------------
    # Read in the XML file and treat as one big string
    #--------------------------------------------------------------------------
    $xmldata = readXml("$filename");
    if ($xmldata eq "")
    {
        printErrorMsg("ERROR: unable to read XML file $filename\n");
        exit(1);
    }

    #--------------------------------------------------------------------------
    # Do the template variable substitution, if any
    #--------------------------------------------------------------------------
    foreach my $key (keys(%xmlvars))
    {
        vprint "substituting template variable: \%\%${key}\%\% -> $xmlvars{$key}\n";
        $xmldata =~ s/\%\%${key}\%\%/$xmlvars{$key}/g;
    }

    vprint "xmldata:\n";
    vprint "$xmldata\n";

    my $dom = XML::LibXML->load_xml(string => $xmldata);

    # find <integrationtest>
    my @it = $dom->findnodes("/integrationtest");
    die "multiple <integrationtest>" if @it > 1;
    my $integrationtest = shift @it;

    my @titles = $integrationtest->findnodes("./title");
    die "multiple <integrationtest> <title>(s)" if @titles > 1;
    $title_text = $filename;
    $title_text = $titles[0]->textContent if @titles > 0;

    $tmp = sprintf("%d-%02d-%02d", localtime->year + 1900, localtime->mon + 1, localtime->mday);
    printMsg("Starting $title_text on $tmp...\n");

    # Process each platform
    foreach my $platform ($integrationtest->findnodes('./platform'))
    {
        vprint "Processing new platform...\n";

        # Find the machine name
	$machine = "";
	my @machines = $platform->findnodes('./machine');
	die "multiple <machine>s" if @machines > 1;
	$machine = $machines[0]->textContent if @machines > 0;

        # Check if this is specific to a platform we're not running and, if so, skip it
        if (($cmd_line_machine ne "") && (lc($cmd_line_machine) ne lc($machine)))
        {
            printMsg("Skipping platform test because XML <machine>$machine</machine> does not match --machine $cmd_line_machine\n");
            next;
        }

        # Process each test group
	my $testnr = 0;
        foreach my $test ($platform->findnodes('./test'))
        {
	    next if $testname && $testname ne ${$test->findnodes('./name')}[0]->textContent;

	    $testnr++;

            $testgrp = ${$test->findnodes('./name')}[0];
	    $testgrp = ${$test->findnodes('./title')}[0] if !$testgrp;
	    $testgrp = $testgrp->textContent if $testgrp;
	    $testgrp = $testnr if !$testgrp;

	    my @skip;
	    foreach my $r_node ($test->findnodes('./restrict-env'))
	    {
		my $restriction = $r_node->textContent;
		push @skip, $restriction if ! defined $test_env{$restriction};
	    }
	    if (@skip) {
		printMsg("Skipping $testgrp due to restricitons: ".join(',', @skip)."\n");
		next;
	    }

            printMsg("Starting Test: $testgrp\n");

            # Create the contained testcases
            foreach my $testcase ($test->findnodes('./testcase'))
            {
                ++$testcase_index;
		my $cmd = ${$testcase->findnodes('./cmd')}[0];
		$cmd = $cmd->textContent if $cmd;
		my $arg = ${$testcase->findnodes('./arg')}[0];
		$arg = $arg->textContent if $arg;
		my $ffdc = ${$testcase->findnodes('./ffdc')}[0];
		$ffdc = $ffdc->textContent if $ffdc;
		my $exitonerror = ${$testcase->findnodes('./exitonerror')}[0];
		$exitonerror = $exitonerror->textContent if $exitonerror;
		my @restrict_env;
		foreach my $r_node ($testcase->findnodes('./restrict_env'))
		{
		    push @restrict_env, $r_node->textContent;
		}

                push(@testcases_to_run, new Testcase(id=>"$testcase_index.$testgrp",
					cmd=>$cmd, arg=>$arg, ffdc=>$ffdc,
					exitonerror=>$exitonerror,
					restrict_env=>\@restrict_env));
            }
	}
    }

    plan tests => scalar @testcases_to_run;

    foreach my $tc_ref (@testcases_to_run)
    {
	$testcaseid = $tc_ref->id;
	vprint "testcaseid: $testcaseid\n";

	# Check for env restriction at <testcase> level
	my @skip;
	foreach my $restriction (@{$tc_ref->restrict_env})
	{
	    push @skip, $restriction if ! defined $test_env{$restriction};
	}
	if (@skip) {
	    printMsg("Skipping $testcaseid due to restricitons: ".join(',',@skip)."\n");
	    next;
	}

	# Get exit-on-error specification (if any)
	$exitonerror = 0; # default is "no"
	$tmp = $tc_ref->exitonerror;
	if ($tmp ne "")
	{
	    $tmp =~ tr/A-Z/a-z/;
	    if (($tmp eq "n") || ($tmp eq "no"))
	    {
		$exitonerror = 0;
	    }
	    elsif (($tmp eq "y") || ($tmp eq "yes"))
	    {
		$exitonerror = 1;
	    }
	    else
	    {
		printErrorMsg("ERROR: unrecognized value in <exitonerror>: $tmp\n");
		exit(1);
	    }
	}

	# Get the command arguments (if specified separately)
	my $testcase = $tc_ref->cmd;
	$args = $tc_ref->arg;
	$testcase =~ s/\%\%testcaseid\%\%/${testcaseid}/g;
	$args =~ s/\%\%testcaseid\%\%/${testcaseid}/g;

	# Get the FFDC script(s) (if any)
	$tmp = $tc_ref->ffdc;
	$tmp =~ s/\%\%testcaseid\%\%/${testcaseid}/g;
	@ffdc_scripts = split(/\,/, $tmp);
	$ffdc_script_count = @ffdc_scripts;

	# Run the command
	diag("Starting $testcaseid");
	my $testrc = runCmdTest($testcase, $testcaseid);
	diag ($testrc);
	# Handle testcase errors
	ok($testrc eq 0, $testcaseid);

	if ($testrc)
	{
	    # Capture FFDC if requested
	    if ($ffdc_script_count != 0)
	    {
		printMsg("Capturing FFDC from test\n");
		foreach $ffdc_script (@ffdc_scripts)
		{
		    $testcase = "$ffdc_script";
		    $args = "";

		    runCmdTest();

		    # reset, so we won't pass this --timeout option on the next command
		    if ($testrc != 0)
		    {
			printErrorMsg("ERROR: FFDC capture failed.  Partial data may be stored (see previous messages)\n");
		    }
		}
	    }

	    # Clean up and terminate if requested
	    if ($exitonerror)
	    {
		printErrorMsg("ERROR: terminating test\n");
		exit(1);
	    }
	}
    }
}

# Export any %%variable%%'s as environment variables, so read-op-xml-it can access them
sub exportXmlVars
{
    foreach my $key (keys(%xmlvars))
    {
        vprint "Exporting xmlvars{$key} as env variable xmlvar_$key = $xmlvars{$key}\n";
        $ENV{"xmlvars_$key"} = $xmlvars{$key};
    }
}

# parse the arguments
$xmlvars{verbose} = "";

my $help;
my $resdir;
my $test_env;

GetOptions('help|?|h' => \$help,
	   'verbose' => sub { set_verbose(1);
			      $verbose_str = "--verbose";
			      $xmlvars{verbose} = "--verbose"; },
	   'debug=s' => sub { $debug = shift; set_verbose(1); },
	   'testenv=s' => \$test_env,
	   'result=s' => \$resdir,
	   'test=s' => \$testname,
	   'quiet' => \$quiet,
    ) or syntax();

syntax() if $help;

$test_env{$_} = 1 foreach (split /,/,$test_env);

my @argv = @ARGV;
while (my $arg = shift @argv)
{
    # Arguments representing XML substitution variables...
    if ($arg =~ /^\-\-/)
    {
        $arg = substr($arg, 2);
        $xmlvars{$arg} = shift(@argv);
    }
    elsif ($arg =~ /^\-/)
    {
        $arg = substr($arg, 1);
        $xmlvars{$arg} = shift(@argv);
    }

    $filename = $arg;
}


if ($filename eq "")
{
    printErrorMsg("ERROR: you must specify a XML file defining the test\n");
    exit(9);
}

$logfile = "$resdir/$filename.log" if $resdir;

# if we were passed a --machine, save it off for checking against individual tests
if ($xmlvars{machine} ne "")
{
    $cmd_line_machine = $xmlvars{machine};
    vprint "received --machine $cmd_line_machine on command line\n";
}

#-------------------------------------------------------------------------------
# set vars representing execution environment
#-------------------------------------------------------------------------------

vprint "xmlvars{machine}: $xmlvars{machine}\n";
vprint "test_env: $test_env\n";

# export %%variables%% for read-op-xml-it (which is run under fips-it-list)
exportXmlVars();

# Validate the syntax of the specified XML file
OPBVTXML::bvt_xml_is_valid("op-it.xsd", $filename)
    or die "ERROR: XML file $filename failed validity checking";

#------------------------------------------------------------------------------
# Run the integration test bucket as defined by the input file
#------------------------------------------------------------------------------
runAllTests();

#------------------------------------------------------------------------------
# Cleanup and exit
#------------------------------------------------------------------------------
$tmp = sprintf("%d-%02d-%02d", localtime->year + 1900,
		   localtime->mon + 1, localtime->mday);
if ($totalrc == 0)
{
    printMsg("OK: Finished tests on $tmp with no testcase errors.\n");
}
else
{
    $totalrc = 1;
    printErrorMsg("ERROR: Finished tests on $tmp with one or more testcase errors.\n");
}
if ($logfile ne "")
{
    diag "Output from this test saved in $logfile (simics server logs stored in same directory)\n";
}
exit($totalrc);
